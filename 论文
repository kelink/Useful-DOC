

基于通讯录的封闭式移动社交YueMa手机App
罗可林  思科信息学院  2011级软件工程
摘　要:自2011年以来，随着移动设备硬件的不断更新和推出，支持各种手机上网的3G，4G乃至5G的技术的不断革新，通讯网络在不断搭建和支持，为以android系统为代表的移动终端设备提供了充分合理的发展空间，与此同时带来了移动应用空前的繁荣。
在计算机发展的历史中，利用机器设备满足人与人之间的交流和互动，乃至为人类服务，一直都是IT从业者的关注点和追求的方向。然而智能手机的出现，极大地为解决人们对于各种刚性和隐形的需求提供了一个很重要的切入点。在人与人的社交中，人们总是倾向于和熟悉的人在一起进行社交活动。但是与此同时，人们也常常有希望通过自己身边的熟人去认识熟人的朋友以达到拓展人脉圈子的隐形需求。因此，通过熟人挖掘其中的陌生人际关系进行社交，能够满足特定兴趣和喜好人群的活动需求，以达到交友的目的。
本项目是一个基于通讯录的封闭式人际关系的移动社交型手机应用。系统采用的是C/S架构。客户端是基于Android平台上开发的移动手机APP，服务端是运行于Window系统下以Spring MVC 为框架所搭建的Java EE 企业级应用。本系统可以在用户允许读取通讯录的情况下，以后台服务器生成的人际关系进行兴趣类活动，达到兴趣社交，拓展人脉的功能。本文主要介绍了项目开发的背景，项目整体的构想并对其中的重点部分(后台服务器端)进行了详细的阐述。文中对项目进行了可行性分析和需求分析，着重介绍了项目中的几个重点模块的详细设计以及重点功能的实现方法，最后图文并茂地介绍了程序的详细的使用方法并对整个项目进行总结
。
关键词：Android；Spring MVC；通讯录；封闭式，社交


目录
1 绪论	4
1.1 开发背景	4
1.1.1 问题的提出	4
1.1.2 项目的目的和意义	5
1.2 同类软件现状	5
1.2.1 同类软件介绍	5
1.2.2 本人的主要工作	6
1.3 开发工具的选择及介绍	6
1.3.1 开发语言	6
1.3.2 开发平台	7
1.3.3 开发工具	7
2 项目总体介绍	8
2.1 项目构想	8
2.1.1 总体构想	8
2.1.2 服务器端构想	8
2.2 重点介绍	10
2.2.1 通信协议	10
2.2.2关系定义	10
2.2.3 关系的计算	11
2.2.4 消息推送	12
3 系统分析与设计	14
3.1 可行性分析	14
3.1.1 经济可行性	14
3.1.2 技术可行性	14
3.1.3 法律可行性	15
3.2 需求分析	15
3.2.1 功能需求	15
3.2.2 可靠性需求	16
3.2.3 安全性需求	16
3.2.4 运行环境需求	17
3.3 系统结构	17
3.3.1 模块划分	17
3.3.2 服务器端结构图	18
4 主要模块详细设计	18
4.1 服务器端	18
4.1.1关系维护模块	18
4.1.2网络模块：	19
4.1.3活动模块：	19
5 重点功能的实现	20
5.1关系维护模块实现：	20
6 系统使用说明	23
7 总结	23
7.1 项目总结	23
7.2 存在的问题与改进的方向	24
参考文献：	25












1 绪论
1.1 开发背景
1.1.1 问题的提出
随着科技的不断发展，计算机技术已经日新月异，在不断完善和拓展的计算机技术传统领域，PC端的应用早已经多如牛毛。然而在以手机为代表的移动应用却远远达不到满足人们的多种不同的需求。2008年，以Google公司发布的开源Android 系统为代表，移动通讯端应用的繁荣时代正式随着智能手机硬件的发展而日渐为人们所青睐。
目前，移动手机终端的不断普及，手机应用也在人们的生活中越来越多被使用。在众多的应用中，通过应用实现人与人之间的交流和互动一直是IT从业人员的一个重要的关注和突破点。目前，市面上已经涌现出许许多多处理人际关系的社交类软件，不断的有应用推出来满足人们的隐形或者刚性的需求。在目前国内的手机应用市场上，基于人际关系来划分主要分为几大块。一是以熟人为基础进行的垂直网络社交，主要代表有 “微信”，“QQ”，“来往”等。二是以陌生人为基础的广泛型社交，主要代表有“陌陌”。同时，基于兴趣的社交主要代表为豆瓣之类。在国外兴起的还有Instagram，WhatsApp等的满足不同人需求的社交工具。而最近比较活跃的，类似于阅后即焚，匿名社交等这类的软件也有新的推出。这些类型的应用主要处理的要么是熟人关系的社交，要么是陌生人关系下的社交，同时没有根据兴趣形成社交圈子。因此，有没有一个很好的应用可以同时兼顾两种关系呢？根据这些设想，本项目进行开发类似功能的手机应用。
1.1.2 项目的目的和意义
本论文所研究的目的是在Android智能手机上实现一种基于手机通讯录产生的熟人关系网络下的陌生二度人脉社交产品。首先，它是一种手机移动端上的社交产品，能够在多个运营商提供的网络环境或者是WI-FI 的情况下进行策划开启组织活动，其次它能够分享活动，和陌生的二度人脉进行交流互动，尝试新关系的社交方式。
本项目在意义在于基于熟人社交的基础上结合陌生人社交，推出二度人脉的新概念来挖掘社交中的需求。它能在以通讯录为基础的人脉关系上，通过兴趣活动的组织形式，专注于圈子兴趣社交。与此同时，推出的二度人脉关系，能够同时满足人们在熟悉的关系去开启一段陌生的交往。活动基于兴趣，关系基于熟悉，同时兼顾熟悉的陌生人的二度人脉，能够保证社交活动的安全和有效进行。
1.2 同类软件现状
1.2.1 同类软件介绍
目前市场上主打社交主题的软件并不在少数。例如介绍下面几种：
微信：微信是腾讯推出的一款手机通信软件，用户可以通过微信与好友进行联系，支持通过手机网络发送语音短信、视频、图片和文字，可以单聊及群聊，还能根据地理位置找到附近的人。该产品支持ios、Android、Windows Phone、塞班等多种平台手机。它设计初衷是基于熟人社交
陌陌：陌陌是一款基于地理位置的移动社交工具，用户可以通过陌陌认识周围任意范围内的陌生人，查看对方的个人信息和位置，免费发送短信、语音、照片以及精准的地理位置。它设计初衷是基于陌生人社交
豆瓣：是一种基于兴趣社交进行设计的软件，它的涉及面牵扯到吃喝住行等。在豆瓣上，你可以自由发表有关书籍、电影、音乐的评论。可以搜索别人的推荐，所有的内容、分类、筛选、排序都由用户产生和决定，甚至在豆瓣主页出现的内容上也取决于你的选择。它设计初衷是基于兴趣圈子进行社交。
以上三种所提及到的app，在目前国内是比较普及的，也是它所代表的关系领域内有名的代表。但是，同期相比，基于熟人网络开展二度陌生人脉的社交软件在国内还是比较少，而同时，通过小圈子基于兴趣进行社交更是比较少。
1.2.2 本人的主要工作
本人从项目的需求分析开始，参与了本项目的设计和实现的全部过程，并承担项目的主要关键任务，独立完成本系统后台服务器的整体搭建和编码实现，具体工作有下面几点：
（1）参与项目一开始的需求调研，参与和客户端Android平台的架构设计和后台服务器的架构工作
（2）完成后台服务器的搭建，包括数据库设计和后台业务逻辑实现。
（3）完成后台服务器的几大功能模块，包括数据传输模块，关系维护模块，活动流程处理模块，消息通知模块等
（4）完成后台服务器和客户端的交互和测试。
1.3 开发工具的选择及介绍
1.3.1 开发语言
（1）在客户端，本项目采取的编程语言是Android平台下的Java
（2）在服务器端，本项目采用的是基于Spring MVC 框架下的J2EE企业级架构成的Java web 服务器。
下面对以上提出的一些技术做个简单介绍：
	[JAVA]
Java[1] 是一种可以撰写跨平台应用软件的面向对象的程序设计语言。Java 技术具有卓越的通用性、高效性、平台移植性和安全性，广泛应用于PC、数据中心、游戏控制台、科学超级计算机、移动电话和互联网，同时拥有全球最大的开发者专业社群

	[Spring MVC]
Spring MVC属于SpringFrameWork的后续产品，已经融合在Spring Web Flow里面。Spring 框架提供了构建 Web 应用程序的全功能 MVC 模块。使用 Spring 可插入的 MVC 架构，可以选择是使用内置的 Spring Web 框架还可以是 Struts 这样的 Web 框架。

	[Android] 
Android是一种基于Linux的自由及开放源代码的操作系统，主要使用于移动设备，如智能手机和平板电脑，由Google公司和开放手机联盟领导及开发. Android一词的本义指“机器人”，同时也是Google于2007年11月5日 宣布的基于Linux平台的开源手机操作系统的名称，该平台由操作系统、中间件、用户界面和应用软件组成。
1.3.2 开发平台
在服务器端方面，就国内情况而言，Windows依然是个人计算机最常用的操作系统，其他平台在短时间内无法撼动其霸主地位，由于使用Java进行开发，Java本身的跨平台性，可以很方便的移植到其他操作系统上。因此，考虑Windows系统作为开发服务器端的优先选择。
1.3.3 开发工具
	Spring 开发套件：
由于项目使用到SpringMVC 的技术框架，在综合考虑到项目搭建框架所需的时间花费上，故此选择由Spring公司提供的一款基于Eclipse 并集成Spring框架的快速开发工具Spring-tool-suit。该工具本身已经集成SpringMVC 框架，能够快速配置，省去开发人员花在框架的基本配置上。

	WAMP
Wamp 是一款Windows下的Apache+Mysql + PHP，一组常用来搭建动态网站或者服务器的开源软件。 它本身集成有Mysql 数据库。Mysql作为一款免费的数据库，它具有简单方便、稳定、占用空间小的特点，同时性能不比其它大型数据库差，具有强大的可扩展性。Wamp 能够提供可视化的界面进行数据库的基本管理，能提高开发者的效率。同时集成的Mysql数据库也能很简单的被用户操作，它能通过由phpMyAdmin构成的HTML网页集成管理操作，相当于远端管理MySQL数据库，方便建立、修改、删除数据库及资料表。

2 项目总体介绍
2.1 项目构想
2.1.1 总体构想
本项目整体采用C/S架构，分为客户端和服务端。服务端可以同时支持多用户同时进行访问和操作。为了整个系统的安全性，客户端进行访问时候需通过验证。通过验证后的链接方可以访问服务端提供的接口信息。由于本系统是基于通讯录上进行开发的，因此，客户端需用户同意开启读取通讯录的权限后方可进行接下来的操作。在用户提供了权限后，能够后台同步通讯录到服务器进行关系计算，基于用户所产生的关系将会对后面的兴趣社交提供条件。在基于关系的基础上，用户能够组织发起活动，同是能够参与和分享活动，也可以通过信息交流，验证成为新的人脉关系，拓展社交圈子。
 
（基本结构图）

2.1.2 服务器端构想
每个客户端注册使用时候，都会上传手机上的通讯录，服务端只收集号码信息，不存储姓名和其他。在服务器在收集到由客户端发来的通讯录信息后，后台服务器能够基于收集到的信息进行计算得出关系网。在计算完后用户才能进入到活动的界面。接下来就是活动的业务流程处理，包括组织发起活动，参与分享活动，聊天模块等
 
如上图所示
1.	当用户注册成功后，或进行通讯录同步服务器操作
2.	当更新完数据库后，用户将得到人脉关系表，人脉关系分为一度人脉和二度人脉
3.	在基于获得到的人脉关系，用户可以开始活动流程。组织发起活动，参与分享活动和关系管理
4.	用户好友之间可以通讯交流，非好友可以进行添加，得到同意后，关系进一步扩大
5.	对于非成员，可以通过邀请进行注册

2.2 重点介绍
2.2.1 通信协议
由于远程服务器端和android 手机端需要交互，为了信息传输的统一性和规范性，我们使用统一的数据形式进行数据交换——JSON。
JSON(JavaScript Object Notation) 是一种轻量级的数据交换格式。它基于JavaScript（Standard ECMA-262 3rd Edition - December 1999）的一个子集。 JSON采用完全独立于语言的文本格式，但是也使用了类似于C语言家族的习惯（包括C, C++, C#, Java, JavaScript, Perl, Python等）。这些特性使JSON成为理想的数据交换语言。 易于人阅读和编写，同时也易于机器解析和生成(网络传输速度)。
JSON[1] 结构有两种结构[2] 
json简单说就是javascript中的对象和数组，所以这两种结构就是对象和数组两种结构，通过这两种结构可以表示各种复杂的结构
1、对象：对象在js中表示为“{}”括起来的内容，数据结构为 {key：value,key：value,...}的键值对的结构，在面向对象的语言中，key为对象的属性，value为对应的属性值，所以很容易理解，取值方法为 对象.key 获取属性值，这个属性值的类型可以是 数字、字符串、数组、对象几种。
2、数组：数组在js中是中括号“[]”括起来的内容，数据结构为 ["java","javascript","vb",...]，取值方式和所有语言中一样，使用索引获取，字段值的类型可以是 数字、字符串、数组、对象几种。
经过对象、数组2种结构就可以组合成复杂的数据结构了。
在本项目中，服务端和客户端进行交流的通信协议我们采用固定格式的JSON数组进行传输，格式如下：
[{code:10000},{message:”success ”},{result:[{},{},{}]}]
2.2.2关系定义
由于本应用是基于通讯录基础上实现的活动社交软件，因此在对于人际关系处理的逻辑和实现上是本项目的重中之重。下面定义三种本项目多提及到的三种关系。
一度人脉:也叫朋友，在应用中定义为默认通讯录里面的用户；
另二度人脉:即朋友的朋友，在应用中定义为通讯录里面为当前用户存储的朋友的手机通讯录里面所存储的用户号。
陌生人:非注册用户，除一度或二度人脉以外的社交关系。
2.2.3 关系的计算
在本项目中，定义一个简单人脉关系的描述：
如果用户A的通讯录里存储了N1,N2…Nn等用户，描述为A follow了N个人{N1，N2…Nn}，也就是A的一度人脉有N1，N2，直到Nn。它所所构成的集合为{ N1，N2…Nn }
因此我们不由得想到，如果A follow 用户N1，那么N1也应当有它所对应的follow的用户，它构成的集合就是{N11，N12..Nnn}，因此在这些集合上查找A follow 的用户N1所follow的用户N11就得出二度人脉A-N11
关于二度人脉算法的实现，本文是通过广度搜索算法来查找，在确定所要查找的关系深度为2的情况下，算法就变为，实现第一步找到用户关注的人；第二步找到这些用户关注的用户，因此算法实现可以归为以下两大步骤：
（1） 找出 任意一个用户 的 follow 集合与 被 follow 的集合。如图所示
 
（2） 在上一步关系中，若B follow A，而 A follow T ，则可以得出 T 为 B 的二度人脉，且间接者为A ，于是找出 相同二度人脉的不同间接人。如图所示：
 
由于项目开始设定的用户数量基数不大，以此选择使用基本的使用内存的方式进行计算用户关系。当然在考虑到千万级用户的情况下不适合使用内存读取进行计算。建议在海量数据的二度人脉挖掘算法使用Hadoop 进行实现。
本项目中二度人脉关系的计算是基于整个通讯录表进行计算的。后台设置一个固定的模块和数据库保持连接，以固定的时间间隔进行更新人际关系表。为了节省和数据库之间的连接，关系计算模块设定连接线程池，缓存与数据库的链接，在每次更新完后释放连接。与此同时客户端设定只在初次运行时同步通讯录到服务器，此后在通讯录有变更的时候手动更新数据到服务端进行关系计算，减少不必要的关系计算和保持关系的实时性。
2.2.4 消息推送
所谓的消息推送就是从服务器端向移动终端发送连接，传输一定的信息。比如一些新闻客户端，每隔一段时间收到一条或者多条通知，这就是从服务器端传来的推送消息；还比如常用的一些IM软件如微信、GTalk等，都具有服务器推送功能。现在消息推送一般有以下3个方式：
　　1)通过SMS进行服务器端和客户端的交流通信。
　　在Android平台上，你可以通过拦截SMS消息并且解析消息内容来了解服务器的意图，可以实现完全的实时操作。但是问题是这个方案的成本相对比较高，且依赖于运营商。
　　2)循环主动定时获取
　　这种方法需要客户端来做一个定时或者周期性的访问服务器端接口，以获得最新的消息。轮询的频率太慢可能导致某些消息的延迟，太快则会大量消耗网络带宽和电池。
　　3)持久连接
　　这个方案可以解决由轮询带来的性能问题，但是还是会消耗手机的电池。我们需要开一个服务来保持和服务器端的持久连接（苹果就和谷歌的C2DM是这种机制）。但是对于Android系统，当系统可用资源较低，系统会强制关闭我们的服务或者是应用，这种情况下连接会强制中断。（Apple的推送服务之所以工作的很好，是因为每一台手机仅仅保持一个与服务器之间的连接，事实上C2DM也是这么工作的。即所有的推送服务都是经由一个代理服务器完成的，这种情况下只需要和一台服务器保持持久连接即可。C2DM=Cloud to Device Messaging）。
为了消息推送的及时和可持久化，本项目接入极光推送Jpush 的android SDK 和在服务端加入JAVA 开发的SDK。极光推送是国内几款比较出名而且免费的推送平台。它是基于基于HTTP协议长连接实现推送的，能够为接入的android应用提供免费而且稳定的消息推送服务。（在使用版权上需要声明相关法律条例，不会和本项目产生不可纠纷的法律上问题）。
	由于项目基于Sping开发，使用Maven管理，接入方式参考了Jpush 官网提供的接入文档。Jpush的工作流图如下所示：
 
（图片来自Jpush官网）
（1）	需要在开发者的服务端接入SDK，同时客户端也需要接入SDK
（2）	消息的推送是经过Jpush的服务器进行转发派送的
（3）	每个应用都需配置唯一的应用控制秘钥
（4）	Jpush提供消息的发送成功，接入数等的统计
3 系统分析与设计
3.1 可行性分析
3.1.1 经济可行性
本项目的开发需要使用Spring-toolSuit、，Wamp，Android SDK等开发框架和集成开发环境。这些软件都可以在各自的官方网站上免费下载，因此在开发工具上不存在费用支出。
另外，本项目基于纯软件实现，且不需要公共服务器或者购买额外的硬件，因此在硬件方面也不存在费用支出。
综上所述，本项目在经济上是可行的
3.1.2 技术可行性
	本项目是一个基于C/S架构，采用Json数据格式进行交互的的系统。C/S架构本身而言是属于一种非常成熟的技术。服务器端使用基于Spring MVC 框架实现。Spring MVC 是由Spring 公司开发集成，能够很好的支持构建 Web 应用程序的全功能 ，Spring MVC 分离了控制器、模型对象、分派器以及处理程序对象的角色，这种分离让它们更容易进行定制。基于SpringMVC 的框架和ssh 一样，是业界内公认的比较好的两种web企业级开发框架。在实现多用户连接、系统控制等功能方面不存在理论上的技术问题。
在客户端上，Google为Android的开发提供了完善的文档支持，很多问题都可以查阅官方文档得到解决。而且当前Android开发者众多，在技术社区中可以得到有效的帮助。另外，Android本身提供了许多封装的功能，可以很好地实现网络通信等功能，因此在客户端开发上也不存在技术问题。
综上所述，本项目在技术上是可行的。

3.1.3 法律可行性
本项目中，服务所使用的框架都是Spring 公司提供的免费开源框架，是一种可以免费用于非商业的的框架，业务逻辑实现都是纯手工编码实现，因此在这部分代码的使用上不存在法律问题
项目中使用到Jpush提供的消息推送服务，须得在软件的著作版权中声明该部分的法律条款的使用情况，具体参考Jpush平台提供的法律条例。除此之外，其余的软件著作版权不属于Jpush开发平台，而且Jpush开发平台允许用户免费接入。因此在不作为商业用途的基础上，本项目可以开发使用。若果涉及到商业用途，需和Jpush开发平台达成协议。
本项目的其他模块均为自主设计和开发，本人拥有相关代码的著作权，因此在这部分代码上也不存在法律问题
综上所述，本项目在法律上是可行的。
3.2 需求分析
3.2.1 功能需求
根据对于同类软件缺点的研究和前期的功能构想，本系统的服务端的主要功能是提供接口供客户端调用，其需求如下:
(1)登陆注册接口
能够提供安全可靠的登陆信息，保证登陆的有效性，注册时按照提供的手机号码，正确匹配唯一的注册码提供注册
（2）活动圈子动态接口
使用后台计算得到的人脉关系，查找数据库中对应一度和二度人脉关系的数据，返回给客户端使用
（3）活动个人动态接口
使用后台计算得到的人脉关系，查找数据库中对个人参与的活动的信息数据，返回给客户端使用
（4）活动开展接口
接受客户端发来的数据，开展活动，更新活动，删除活动，查询活动等的对应操作
（5）人脉管理接口
查询一度和二度人脉，能够手动更新通讯录到服务端
（6）消息管理接口
后台数据库实现自动查询，通过Jpush 后台发送消息，通知客户端
（7）用户个人信息管理接口
接收客户端数据，实现用户信息的修改
(8)系统版本设置管理接口
 提供版本更新信息和版本下载
（9）二维码生成（服务器端）
服务器端可以将当前电脑的IP地址按照一定的格式处理后通过Google Chart API生成对应的二维码图像。
（10）关系计算模块
单独的模块来进行数据库人脉关系的计算。

3.2.2 可靠性需求
系统分为服务器端和客户端，所有的请求都是客户端通过网络连接发送到服务器端。以此本项目的可靠性在于服务端是否能够提供正确的信息和网络的稳定性。要求网络模块能够提供比较可靠连接，并且能够处理常见的连接错误。
3.2.3 安全性需求
	由于本项目android 应用是通过网络请求的，客户端在请求数据的时候，组要进行验证登陆的信息。因此在调用接口时候需提供有效的验证信息才可以访问数据，服务端需要保证验证信息的正确性和合法性，需要支持多种方法对客户端合法性进行验证和限制。
3.2.4 运行环境需求
	在网络方面，本系统的设计使用环境是同处于一个局域网中的计算机和手机，即计算机和手机可以通过路由器连接，因此要求要有一个无线路由器。同时，服务器端的二维码生成功能需要用到Google Chart API，因此如果要使用二维码功能，需要服务器端有Internet访问权限。
在服务器方面，由于使用到Java 7开发，需要支持安装了Java 7以上的机器可以使用。同时由于数据库使用的是wamp 集成的Mysql，因此需要数据库为Mysql的服务器。
3.3 系统结构
3.3.1 模块划分

模块名称	模块功能
用户处理模块	负责处理客户端的注册登陆信息
关系维护模块	负责对维护一度和二度人脉关系
通讯录同步子模块	负责对处理通讯同步的请求
关系计算子模块	负责对计算得出二度人脉关系
活动开展模块	负责对处理活动的发起，取消，更改，过期
活动评论子模块	负责活动开展的评论和回复
活动点赞子模块	服务活动点赞的处理
网络模块	负责网络通信功能
连接管理模块	负责对连接的安全验证和管理
消息模块	负责客户端消息的生成
设置模块	负责程序设置项的读写
二维码生成模块	负责根据提供的文字生成二维码

3.3.2 服务器端结构图
 
4 主要模块详细设计
4.1 服务器端
4.1.1关系维护模块
	本模块主要由两个子模块构成。一个是通讯录同步模块，另一个是关系计算模块。下面就这两个模块分别进行描述。
通讯录同步子模块：客户端在初次使用本应用的时候，会被请求是否读取通讯录，在允许读取通讯录的时候，客户端会先把匹配到适合的手机号码保存到本应用的数据库，然后再更新到服务器端。同时客户端维持一个通讯录修改的监控模块，在有更新的情况下会在二次或以后的同步通讯录的同时向服务器同步新的数据。服务器在接收到更新通讯录的请求时，负责把通讯录表给更新。这也是一度人脉的生成。
关系计算子模块：服务器端维持一个间隔时间一定的关系计算模块，每隔一段时间，该模块都会扫描服务器端的通讯录，通过二度人脉的关系算法，更新二度人脉的数据库表。为了减少链接数据库使用的时间，该模块特别添加c3p0作为数据库链接缓存池，以保证关系的正常维护，也就是二度人脉的生成。
4.1.2网络模块：
网络模块是网络功能的提供者，所有与网络相关的操作都由网络模块实现，其负责连接的建立/断开，以及数据的接收和发送。网络模块分为连接线程、连接处理者和连接数据监听器三部分。客户端通过Android volley 提供的异步网络请求到应用的网络模块，服务器端的网络模块由Spring MVC 提供。基于Java web 的网络请求，服务端维持链接线程池，当用户有请求过来的时候，Spring 的框架会通过监听器调度请求。跳转到适应的controller 里面的方法里面进行业务处流，处理完后，通过JSON数据的格式返回数据到应用。

4.1.3活动模块：
活动模块是本应用的主要业务处理模块，活动模块包含有点赞子模块，评论子模块还有业务处理子模块。
业务处理子模块主要有以下几个方面的实现：
用户登陆注册，用户活动的发起，活动的参与，活动的更新，活动的结束和活动的删除。
用户登陆注册使用手机号码作为登陆信息。
用户活动的发起支持图文传输和地理模块的识别，利用数据库保持经纬度使得应用更加具有立体感
活动的参与和更新支持消息通知
下面主要关注下评论子模块的实现：
评论模块的表结构如下：
CREATE TABLE `ycomment` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `ontent` varchar(100) DEFAULT NULL,
  `creator_id` int(11) NOT NULL,
  `create_time` datetime NOT NULL,
  `is_delete` int(11) NOT NULL,
  `father_comment_id` int(11) NOT NULL,
  `activity_id` int(11) NOT NULL,
  `comment_path` text NOT NULL,
  PRIMARY KEY (`id`)
)
评论表能够实现回复评论的评论，在数据库设计方面可以通过comment_path 这字段实现路径的追溯。
5 重点功能的实现
5.1关系维护模块实现：
关系维护模块的主要工作是实现关系的添加和关系的计算。在客户端更新通讯录到服务器后，服务器会全部保留和接受并作为一度人脉处理。二度人脉主要通过一度人脉的基础上计算的来。
//定时任务更新二度人脉关系表
public class CalMain {

	public static void main(String[] args) throws InterruptedException {
		ScheduledExecutorService service = Executors.newScheduledThreadPool(2);
		long initialDelay2 = 1;
		long delay2 = 5;
		// 从现在开始5秒钟之后，每隔2秒钟执行一次关系运算,取决于每次任务执行的时间长短，是基于不固定时间间隔进行任务调度。
		service.scheduleWithFixedDelay(new CalTask(), initialDelay2, delay2,
				TimeUnit.SECONDS);

	}
}
在CalTask中，实现以下的逻辑：
public void execute() {
		// get All contact
		long time = System.currentTimeMillis();
		ConnectionPool pool = ConnectionPool.getInstance();
		Connection connection = pool.getConnection();
		ArrayList<TextPair<String, String>> contacts = null;
		System.out.println("开始更新二度人脉关系...");
		if (connection != null) {
			try {
				contacts = RelationDaol.getAllContact(connection);

			} catch (SQLException e) {
				e.printStackTrace();
				System.out.println("获取Contact 失败");
			}
			try {
				// calculate relation
				System.out.println("relation 计算所有关系中....");
				Set<Degree2Friend> newList = RelationCalculator.cal(contacts);

				System.out.println("relation 新旧关系比较开始...");
				// get old relation
				Set<Degree2Friend> oldList = RelationDaol
						.getAllSecondRelation(connection);
				// compare relation
				RelationDaol.compare(oldList, newList);
				System.out.println("relation 比较结束");

				// restore Relation
				if (!oldList.isEmpty()) {
					System.out.println("relation 删除旧的关系"
							+ RelationDaol.batchDel(connection, oldList));
				}
				if (!newList.isEmpty()) {
					RelationDaol.batchInsert(connection, newList);
					System.out.println("relation 添加新的关系"
							+ RelationDaol.batchDel(connection, oldList));
				}
				// 清理，为下次做准备
				contacts.clear();
				oldList.clear();
				newList.clear();

			} catch (SQLException e) {
				e.printStackTrace();
				System.out.println("Exception 发生");
			} finally {
				try {
					connection.close();
				} catch (SQLException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}

			}

		}
		System.out.println("relation 更新结束");
		System.out.println("消耗时间" + (System.currentTimeMillis() - time));
	}
其中二度关系算法实现如上面所提及的
public static Set<Degree2Friend> cal(
			ArrayList<TextPair<String, String>> contacts) {
		Set<Degree2Friend> degree2Friends = new HashSet<Degree2Friend>();
		HashMap<String, Rela> relasList = new HashMap<String, Rela>();

		for (TextPair<String, String> item : contacts) {
			// 判断是否存在，不存在创建
			if (!relasList.containsKey(item.getKey())) {
				Rela rela = new Rela();
				relasList.put(item.getKey(), rela);
			}
			if (!relasList.containsKey(item.getValue())) {
				Rela rela = new Rela();
				relasList.put(item.getValue(), rela);
			}
			// 存在的时候
			relasList.get(item.getKey()).getFollowers().add(item.getValue());
			relasList.get(item.getValue()).getBeFollowers().add(item.getKey());
		}
		// 获取二度人脉和中间人
		for (String middle : relasList.keySet()) {
			Rela rela = relasList.get(middle);
			for (String hostNum : rela.getBeFollowers()) {
				for (String degree2Num : rela.getFollowers()) {
					// 去掉自身
					if (!hostNum.equals(degree2Num)) {
						degree2Friends.add(new Degree2Friend(hostNum,
								degree2Num, middle));
						System.out.println(hostNum + "和" + degree2Num + ",中间人"
								+ middle);
					}
				}
			}
		}

		return degree2Friends;
	}
6 系统使用说明
通过扫描二维码实现安装
7 总结
7.1 项目总结
根据项目最初的构想方案，本应用应该能够实现基于通讯录关系引导下的兴趣社交，该应用能够及时计算人脉关系，在活动的组织和处理流程中能够更加的人性化，可以在实际生活中使用。
在完成项目的整个过程中详细地体会了软件设计和开发的流程，并将相关的设计思想应用到实践当中。在项目的开发中能够更加了解到spring
MVC 企业级web项目的开发过程，同时了解更多关于数据库ORM（关系映射）的使用。了解项目软件工程的概念和编码的规范性。
总体说来，通过本次项目的设计，接触到很多有关编程开发和项目管理的知识，更加具体的体会了项目开发的流程，了解设计模式的重要性，为自己的工作积累了宝贵的经验。
7.2 存在的问题与改进的方向
服务器端存在的问题有：
(1) 关系计算设计到较大数据的运算，在内存不足的时候反应比较慢
（2）用户界面相对比较简陋，体验稍差。
（3）消息模块需要依赖于第三方的Jpush推送，模块设计不足
改进的方向：
（1）关系的计算可以使用Hadoop平台进行大数据的处理。
（2）接入推送服务时需要更多更加完善的统计和服务端数据保存。
（3）重新设计用户界面，采用图形化按钮取代当前的普通按钮。


 
参考文献： 

[1] 李刚 , 《轻量级Java EE企业应用实战》.第二版.北京: 电子工业出版社，2011.
[2] 熊莎. 《国内移动社交用户使用意愿的影响因素研究》.北京邮电大学硕士研究，2012.
[3] 作者: Rod Johnson/Juergen Hoeller/Alef Arendsen/Thomas Risberg/Colin Sampaleanu.《Professional Java Development with the Spring Framework》. Wrox，2005.
[4] 秦小波.设计模式之禅[M].北京:机械工业出版社，2010.
[5] 李刚. 《疯狂Android讲义》.第2版. 电子工业出版社，2013.
[8] 杨丰盛.Android技术内幕[M].系统卷.北京:机械工业出版社，2011.
[9] 钱乐秋，赵文耘等.软件工程[M].北京:清华大学出版社，2007.
[10]刘真.软件体系 结构[M].北京:中国电力出版社，2004.
[11] Jpush  官方开发者学习文档
 
致    谢

转眼四年已经过去，我就要离开广外这个美丽的地方，走上社会，开始独立生活，为了在这个城市立足而努力拼搏。在论文完成之际，我想借此机会向对我十分重要的人以及给过我帮助的人表示深深的感谢。
首先要感谢我的父母。没有你们，就没有我的今天，你们为我付出了太多太多。从幼儿园、小学，到高中、大学，你们都默默支持着我，爸爸辛勤工作，妈妈勤俭持家，让我能在一个温馨的环境里成长。直到现在，当要开始一个人工作生活的时候，我才体会到，不论是持家还是工作，都是一件不容易的事。在临近毕业的时候，你们还常常挂念我工作是否顺利，督促我认真地完成论文。感谢你们，我亲爱的爸爸妈妈！
还要感谢这四年来给我帮助的朋友们。你们都是我生命里缤纷的色彩，谢谢你们曾经给我的帮助！虽然接下来的路要各自前行，但是还是要彼此坚持和鼓励。
最后要感谢彭碧涛老师，非常尽职尽责地对我的毕业设计进行指导，常常和我约谈，了解毕设的进展和遇到的困难，督促我按时完成论文。谢谢老师的悉心教导！
 
广东外语外贸大学
毕业论文（设计）学术诚信声明

本人郑重声明：所呈交的毕业论文（设计），是本人在导师的指导下，独立进行研究工作所取得的成果。除文中已经注明引用的内容外，本论文（设计）不包含任何其它个人或集体已经发表或撰写过的作品成果。对本文的研究做出重要贡献的个人和集体，均已在文中以明确方式标明。本人完全意识到本声明的法律结果由本人承担。

作者签名：

日期：     年   月   日

















广东外语外贸大学
毕业论文（设计）版权使用授权书

本毕业论文（设计）作者同意学校保留并向国家有关部门或机构送交论文（设计）的复印件和电子版，允许论文（设计）被查阅和借阅。本人授权广东外语外贸大学可以将本毕业论文（设计）的全部或部分内容编入有关数据库进行检索，可以采用影印、缩印或扫描等复制手段保存和汇编本毕业论文（设计）。
保  密□，在   年解密后适用本授权书。
本论文（设计）属于
不保密□。
（请在以上方框内打“√”）


毕业论文（设计）作者签名：               指导教师签名：

日期：    年   月   日                   日期：    年   月   日








